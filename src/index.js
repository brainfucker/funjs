"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.types = exports.InMsgBody = exports.InMsgFull = exports.MsgValue = exports.Contract = void 0;
var msg_value_1 = require("./msg_value");
exports.MsgValue = msg_value_1.MsgValue;
var in_msg_full_1 = require("./in_msg_full");
exports.InMsgFull = in_msg_full_1.InMsgFull;
var in_msg_body_1 = require("./in_msg_body");
exports.InMsgBody = in_msg_body_1.InMsgBody;
var codegen_1 = require("./codegen");
var types_1 = require("./types/types");
exports.types = types_1.types;
var int_1 = require("./types/int");
var func_1 = require("./operators/func");
var interfaces_1 = require("./interfaces");
var data_1 = require("./types/data");
var cell_1 = require("./types/cell");
var slice_1 = require("./types/slice");
var nl = "\n";
var Contract = /** @class */ (function () {
    function Contract() {
        this.code = new codegen_1.Codegen();
    }
    Contract.prototype.recvInternal = function (cb) {
        var f = this.func(function (msgValue, inMsgCell, inMsgBody) {
            cb(msgValue, inMsgCell, inMsgBody);
        }, { name: 'recv_internal' });
        var msgValue = new int_1.Int(32, true).init(this.code, 'msg_value');
        var inMsgFull = new cell_1.Cell().init(this.code, 'in_msg_full');
        var inMsgValue = new slice_1.Slice().init(this.code, 'in_msg_body');
        f(msgValue, inMsgFull, inMsgValue); // need to call to generate code
    };
    Contract.prototype.getData = function () {
        var data = new data_1.Data().init(this.code);
        this.code.write("cell get_data() asm \"c4 PUSH\";");
        this.code.write("var ".concat(data.name, " = get_data();"));
        return data;
    };
    Contract.prototype.beginCell = function () {
        return new cell_1.Cell().init(this.code).write();
    };
    Contract.prototype.setData = function (cell) {
        this.code.write("set_data(".concat(cell.name, ");"));
    };
    Contract.prototype["throw"] = function (errCode) {
        this.code.write("throw(".concat((0, interfaces_1.wrap)(errCode), ");"));
    };
    Contract.prototype.func = function (cb, opts) {
        var _this = this;
        var f = new func_1.Func(this.code, cb, opts).callable();
        if (opts === null || opts === void 0 ? void 0 : opts["export"]) {
            var args = opts === null || opts === void 0 ? void 0 : opts["export"][1];
            args.forEach(function (a) {
                a.init(_this.code);
            });
            f.call.apply(f, __spreadArray([this], args, false));
        }
        return f;
    };
    Contract.prototype.sendRawMessage = function (cell, mode) {
        this.code.write("send_raw_message(".concat(cell.name, ", ").concat((0, interfaces_1.wrap)(mode), ");"));
    };
    Contract.prototype.compileFunc = function () {
        var output = ";; this contract is autogenerated with ts codegen" + nl + this.code.compile();
        return output;
    };
    Contract.prototype.compile = function () {
        var funCCode = this.compileFunc();
        return funCCode;
    };
    return Contract;
}());
exports.Contract = Contract;
