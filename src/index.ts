import { MsgValue } from "./msg_value";
import { InMsgFull } from "./in_msg_full";
import { InMsgBody } from "./in_msg_body";
import { Codegen } from "./codegen";
import { types } from "./types/types";
import { Int } from "./types/int";
import { Func } from "./operators/func";
import { FuncArguments, FuncOptions, isType, ReturnArguments, StorageObject, Type, wrap } from "./interfaces";
import { Data } from "./types/data";
import { Cell } from "./types/cell";
import { Slice } from "./types/slice";
const nl = "\n";



class Contract {
    private code:Codegen;
    constructor() {
        this.code = new Codegen()
    }
    
    recvInternal(cb:(msgValue:Int, inMsgCell: Cell, inMsgBody: Slice) => void) {

        let f = this.func((msgValue:Int, inMsgCell: Cell, inMsgBody: Slice) => {
            cb(msgValue, inMsgCell, inMsgBody)
        }, {name: 'recv_internal'})


        let msgValue = new Int(32, true).init(this.code, 'msg_value')
        let inMsgFull = new Cell().init(this.code, 'in_msg_full')
        let inMsgValue = new Slice().init(this.code, 'in_msg_body')

        f(msgValue, inMsgFull, inMsgValue) // need to call to generate code
    }

    getData():Data {
        let data = new Data().init(this.code)
        this.code.write(`cell get_data() asm "c4 PUSH";`)
        this.code.write(`var ${data.name} = get_data();`)
        return data

    }

    beginCell():Cell {
        return new Cell().init(this.code).write()
    }

    setData(cell: Cell) {
        this.code.write(`set_data(${cell.name});`)
    }

    throw(errCode: Int | number) {
        this.code.write(`throw(${wrap(errCode)});`)
    }

    func<ArgType extends FuncArguments, RetType extends ReturnArguments>(cb:(...args:ArgType) => RetType, opts?:FuncOptions<ArgType>):(...args:ArgType) => RetType {
        let f = new Func<ArgType, RetType>(this.code, cb, opts).callable()
        if (opts?.export) {
            let args = opts?.export[1]
            args.forEach(a => {
                a.init(this.code)
            })
            f.call(this, ...args)
        }

        return f
    }

    sendRawMessage(cell: Cell, mode: Int | number) {
        this.code.write(`send_raw_message(${cell.name}, ${wrap(mode)});`)
    }

    compileFunc(): string {
        let output = `;; this contract is autogenerated with ts codegen`+nl+this.code.compile()
        return output
    }
    compile() {
        let funCCode = this.compileFunc()
        return funCCode
    }
}
export { Contract, MsgValue, InMsgFull, InMsgBody, types }